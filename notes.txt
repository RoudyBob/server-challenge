BRONZE DESCRIPTION:
  Design a '/user/create' endpoint that will let the user
  send a new user object through the server to the database. If successful,
  the server should store the user object sent in the database, and send
  a response to the user with a 200 status code and the user
  object just saved.  If the operation fails, the 
  server should respond with a 500 status code and an error
  message back.
  
  Note :: You do not need to use bcrypt.

SILVER DESCRIPTION:
  Complete the bronze level challenge above, but this time 
  create a '/user/login' endpoint that will let the user send
  a user object through the server and check with an existing
  user in the database.  On success, the user object should
  be sent back with an appropriate status code.  On failure,
  an appropriate status code and an error message should be sent.
  Note :: You do not need to use bcrypt.

GOLD DESCRIPTION:
  Complete the silver level challenge above, but make sure
  that passwords are saved encrypted.  When the '/user/create'
  and '/user/login' endpoints send the user information back,
  make sure that information contains a token using
  jwt (this uses the jsonwebtoken dependency).
  Note :: You will modify Bronze and Silver to use bcrypt and implement tokens using jsonwebtoken
*/

TUESDAY 1/19/2021 CHALLENGES
============================

BRONZE CHALLENGE:
Make a new '/create' endpoint in the animal-controller file.  It should save all the data from the animal model to the database, including # of legs, boolean predator value, and its name.
If the animal is correctly saved in the database, inform the user. Otherwise, alert the user if there's an error.
Make another '/' endpoint that will return all the animals created in the database. Like the others, send appropriate statuses based on if the request succeeds or not.
When testing in postman you must use the request
{ "name": "alligator", "legNumber": 4, "predator": true}

SILVER CHALLENGE:
Complete the bronze challenge, then make a new '/delete' endpoint that will delete an animal from the database.  
However you complete this challenge, a request must be able to specify which animal needs to be deleted.  
If the delete was successful, inform the user, otherwise alert the user to an error.

GOLD CHALLENGE:
    Complete the silver challenge, but make a new '/update' endpoint that will let a request update animal data in the database.  
    Like with the silver challenge, the request must be able to specify which animal needs to be updated.  
    On success, inform the user, on failure, alert appropriately. 
  
  Postman Body should look like the following.
  { "name": "alligator", "legNumber": 4, "predator": true}

THURSDAY 1/21/2021 CHALLENGES
=============================
BRONZE CHALLENGE:
Implement a validate-session.js. 
Use the validateSession to protect every route in the animal-controller.js.
They should block any request that does not have an authorization header that bears a token.
This token should be one returned from the login or sign up methods.

SILVER CHALLENGE: 
Add a new column named 'userId' to the animal model. This column should take integers, 
and rows and this column should not be null. Reset your database.

GOLD CHALLENGE:
Taking advantage of the new userId column that links the row of the animal table to the user that posted it from the Silver level challenge, modify the delete endpoint to only allow users to delete only their own animals from the database. You will need to use an options object similar to open used in the Sequelize update() method.

Similarly, modify the get to return only animals the requesting user has posted.